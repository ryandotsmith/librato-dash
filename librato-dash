#!/usr/bin/env ruby
require 'net/http'
require 'json'
require 'uri'
require 'cgi'
require 'yaml'

module LDC
  @data = File.read(ARGV[0])
  @uri = URI.parse(ENV['LIBRATO_URL'] || raise("Must set $LIBRATO_URL"))

  @metric_attributes = %w(color display_max display_min display_units_long
    display_units_short display_stacked display_transform
    aggregate summarize_function)
  @instrument_attributes = %w(display_stacked display_integral)
  @stream_properties = %w(source group_function summary_function color)

  def self.create
    data = YAML.load(@data)
    dashboards = data.map do |dname, idata|
      $stdout.puts("Creating Dashboard: #{dname}")
      instrument_defaults, metric_defaults = {}, {}
      instruments = idata.map do |iname, mdata|
        if iname == "defaults"
          instrument_defaults = mdata
          next
        end
        $stdout.puts("\tCreating Instrument: #{iname}")
        metrics = mdata.map do |mname, mattrs|
          if mname == "defaults"
            metric_defaults = mattrs
            next
          end
          $stdout.puts("\t\tCreating Metric: #{mname}")
          create_metric(mname,
            mattrs.merge(instrument_defaults.merge(metric_defaults)))
        end.compact
        create_instrument(iname, metrics, instrument_defaults)
      end.compact
      create_dashboard(dname, instruments)
    end.compact
  end

  def self.cleanup_dashboard(name)
    result = get("/dashboards?name=#{name}")
    if result["query"]["found"].to_i > 0
      result["dashboards"].each do |d|
        delete("/dashboards/#{d['id']}")
      end
    end
  end

  def self.create_dashboard(name, instruments)
    cleanup_dashboard(name)
    post("/dashboards", {
      "name" => name,
      "instruments" => instruments.map {|i| {"id" => i["id"]}}
    })
  end

  def self.cleanup_instruments
    finding = true
    while finding
      result = get("/instruments")
      if result["query"]["found"].to_i > 0
        result["instruments"].each do |i|
          delete("/instruments/#{i['id']}")
        end
      else
        finding = false
      end
    end
  end

  def self.find_instrument(name)
    result = get("/instruments")
    if result["query"]["found"].to_i > 0
      result["instruments"].each do |instrument|
        if instrument["name"] == name
          puts instrument.class
          return instrument
        end
      end
      return nil
    end
  end

  def self.create_instrument(name, metrics, attrs)
    data = {
      "name" => name,
      "attributes" => attrs.select {|k,v| @instrument_attributes.include?(k)},
      "streams" => metrics.map do |m|
        sp = attrs.merge(m).select {|k,v| @stream_properties.include?(k)}
        {"metric" => m["name"]}.merge(sp)
      end
    }
    if instrument = find_instrument(name)
      put("/instruments/#{instrument['id']}", data)
    else
      instrument = post("/instruments", data)
    end
    get("/instruments/#{instrument['id']}").merge(attrs)
  end

  def self.create_metric(name, attrs)
    resp = put("/metrics/#{name}", {
      "type" => attrs["type"],
      "attributes" => attrs.select {|k,v| @metric_attributes.include?(k)}
    })
    get("/metrics/#{name}").merge(attrs)
  end

  def self.put(path, data)
    p = @uri.path + path
    req = Net::HTTP::Put.new(p, {'Content-Type' =>'application/json'})
    req.basic_auth(CGI.unescape(@uri.user), @uri.password)
    req.body = JSON.dump(data)
    make_request(req)
  end

  def self.post(path, data)
    p = @uri.path + path
    req = Net::HTTP::Post.new(p, {'Content-Type' =>'application/json'})
    req.basic_auth(CGI.unescape(@uri.user), @uri.password)
    req.body = JSON.dump(data)
    make_request(req)
  end

  def self.delete(path)
    p = @uri.path + path
    req = Net::HTTP::Delete.new(p, {'Content-Type' =>'application/json'})
    req.basic_auth(CGI.unescape(@uri.user), @uri.password)
    make_request(req)
  end

  def self.get(path)
    p = @uri.path + path
    req = Net::HTTP::Get.new(p, {'Content-Type' =>'application/json'})
    req.basic_auth(CGI.unescape(@uri.user), @uri.password)
    make_request(req)
  end

  def self.make_request(req)
    http = Net::HTTP.new(@uri.host, @uri.port)
    http.use_ssl = true
    http.set_debug_output($stdout) if ENV['DEBUG']
    resp = http.request(req)
    if (resp.code.to_i / 100) != 2
      $stderr.puts("at=request-failed path=#{req.path}")
    end
    JSON.parse(resp.body) if resp.body && resp.body.length > 0
  end

end
LDC.create if __FILE__ == $0
